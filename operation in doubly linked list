// #include<iostream>
// using namespace std;


// class node{
//     public:
//     int data;
//     node* prev;
//     node* next;

// // constructor
// node ( int data){
//     this -> data = data;
//     this -> prev = NULL;
//     this -> next = NULL;
// }
// };

// int length(node* head){
//     node* temp = head;
//     int len=0;
//     while(temp!=NULL){
//         len++;
//         temp=temp->next;
//     }
//     return len;
// }

// void insertathead(node* &head, int val){  // if we not use reference here means if we write node* head then change copy me hoga main me nhi issi liye apne reference lete h matlab node* &head
//     node* temp = new node (val);

//     temp -> next = head;
//     head -> prev = temp;
//     head = temp;
// }

// void insertattail(node* &tail, int val){
//     node* temp = new node(val);

//   tail-> next= temp ;
//    temp-> prev= tail ;
//     tail = temp;
// }

// void insertatpostion(node* &head,node* &tail, int pst, int val){
//     // inserting at first node
//     if(pst==1){
//         insertathead(head,val);
//         return;
//     }

//      node* temp = head;
//       int count =1;
//     while(count<pst-1){
//         temp=temp->next;
//         count++;
//     }
//     // inserting at last node
//     if(temp->next == NULL){
//         insertattail(tail,val);
//         return;
//     }
//     else{
   
//     node* come = new node(val);

   
//    node* shift = temp->next   ;       // yha error aa rhi h

//    temp->next=come;
//    come->prev=temp;
//    shift->prev=come;
//    come->next=shift;
//     }

// }

// void print(node * head){
//     node* temp = head;
//     while(temp!=NULL){
//         cout << temp-> data << " " ;
//         temp = temp -> next;
//     }
//     cout << endl;
// }


// int main()
// {
//     node* node1 = new node(10);
//     node* head = node1;
//     node* tail = node1;


//     print(head);

//     cout << "lenth is:" << length(head) << endl;

//     insertathead(head, 34);
//     print(head);

//     insertathead(head, 11);
//     print(head);

//     insertathead(head, 22);
//     print(head);

//     insertattail(tail, 33);
//     print(head);

//     insertattail(tail, 44);
//     print(head);

//     insertatpostion(head,tail,1,2);
//     print(head);

//     insertatpostion(head,tail,8,7);
//     print(head);

//     insertatpostion(head,tail,3,100);
//     print(head);

//     insertatpostion(head,tail,6,200);
//     print(head);

//     cout << "head is:" << head->data << endl;
//     cout << "tail is:" << tail->data << endl;
//     return 0;
// }

#include<iostream>
using namespace std;


class node{
    public:
    int data;
    node* prev;
    node* next;

// constructor
node ( int data){
    this -> data = data;
    this -> prev = NULL;
    this -> next = NULL;
}
};

int length(node* head){
    node* temp = head;
    int len=0;
    while(temp!=NULL){
        len++;
        temp=temp->next;
    }
    return len;
}

void insertathead(node* &head,node* &tail, int val){  // if we not use reference here means if we write node* head then change copy me hoga main me nhi issi liye apne reference lete h matlab node* &head
    // for empty list   
    if(head==NULL){
    node* temp = new node (val);
    head = temp;
    tail = temp;
    }
    else{
    node* temp = new node (val);
    temp -> next = head;
    head -> prev = temp;
    head = temp;
    }
}

void insertattail(node* &head,node* &tail, int val){
    // if empty list
    if(tail==NULL){
        node* temp = new node(val);
        tail = temp;
        head = temp;
    }
   else{
 node* temp = new node(val);
  tail-> next= temp ;
   temp-> prev= tail ;
    tail = temp;
   }
}

void insertatpostion(node* &head,node* &tail, int pst, int val){
    // inserting at first node
    if(pst==1){
        insertathead(head,tail,val);
        return;
    }

     node* temp = head;
      int count =1;
    while(count<pst-1){
        temp=temp->next;
        count++;
    }
    // inserting at last node
    if(temp->next == NULL){
        insertattail(head,tail,val);
        return;
    }
    else{
   
    node* come = new node(val);

   
   node* shift = temp->next   ;    

   temp->next=come;
   come->prev=temp;
   shift->prev=come;
   come->next=shift;
    }

}

void deletion(node* &head, node* tail, int pst){
    if(pst==1){
        node* temp = head;
        head=temp->next;
        head->prev=NULL;   // this statement is used as  // temp->next->prev=NULL;
        temp->next=NULL;
       
       
    }
    else {
        node* temp = head;
        int count = 1;
        while(count<pst-1){
            temp=temp->next;
        }
        node* previous = temp;
        node* current = temp->next;
        
        // previous->next=current->next->prev;
        // previous->next->prev=previous->next;

        current->next->prev= previous->next;
        previous->next=previous->next->prev;
        current->prev=NULL;
        current->next=NULL;
    }

}

void print(node * head){
    node* temp = head;
    while(temp!=NULL){
        cout << temp-> data << " " ;
        temp = temp -> next;
    }
    cout << endl;
}


int main()
{
   
    node* head = NULL;
    node* tail = NULL;

    insertathead(head,tail,1);
    print(head);

    insertattail(head,tail, 3);
    print(head);

   
    insertathead(head,tail, 5);
    print(head);

    insertathead(head,tail, 7);
    print(head);

    insertathead(head,tail, 9);
    print(head);

    insertattail(tail,tail, 11);
    print(head);

    insertattail(tail,tail, 13);
    print(head);

    insertatpostion(head,tail,1,15);
    print(head);

    insertatpostion(head,tail,9,17);
    print(head);

    insertatpostion(head,tail,3,19);
    print(head);

    insertatpostion(head,tail,6,21);
    print(head);

    cout << "lenth is:" << length(head) << endl;
    cout << "head is:" << head->data << endl;
    cout << "tail is:" << tail->data << endl;

    deletion(head,  tail, 1);
    print(head);

    deletion(head,  tail, 3);
    print(head);

    cout << "lenth is:" << length(head) << endl;
    cout << "head is:" << head->data << endl;
    cout << "tail is:" << tail->data << endl;
    return 0;
}
